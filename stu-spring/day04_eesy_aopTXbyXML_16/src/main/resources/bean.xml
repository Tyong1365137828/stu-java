<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置业务层-->
    <bean id="accountService" class="edu.hebeu.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>

    <!--配置账户的持久层-->
    <bean id="accountDao" class="edu.hebeu.dao.impl.AccountDaoImpl">
        <!--<property name="jdbcTemplate" ref="jdbcTemplate"/>-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置JDBCTemplate-->
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--配置DataSource-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/eesy_spring"/>
        <property name="username" value="root"/>
        <property name="password" value="072731"/>
    </bean>

    <!--Spring中介于xml声明式事务控制配置步骤：
            1、配置事务管理器;
            2、配置事务的通知:
                (1)、添加xml约束，如本xml文件所示
                (2)、使用 tx:advice标签配置事务通知，
                tx:advice标签的属性：
                    id：给事务通知起一个唯一标识
                    transaction-manager：给事务通知 提供 一个事务管理器引用
            3、配置AOP中的通用切入点表达式
            4、建立事务通知和切入点表达式的对应关系
            5、配置事务的属性
                (1)、在事务的通知 tx:advice标签内部配置 两层标签(tx:attributes和tx:method)
                (2)、tx:method标签内的属性：
                     isolation：指定事务的隔离级别，默认值是DEFAULT(表示使用数据库的默认隔离级别)
                     propagation：指定事务的传播行为，默认值是REQUIRED(表示一定有事务(不管原来有没有，最后都得有，DML语句的选择，
                        DQL语句可以选择SUPPORTS))
                     read-only：用于指定事务是否只读，只有查询方法才能设置为true，默认值是false(表示读写)
                     timeout：用于指定事务的超时时间，默认值是-1(表示永不超时)，如果指定了数值，该数字以秒为单位
                     no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回滚;没有默认值(表示任何
                        异常都回滚)
                     rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚;没有默认值(表示任何异常
                        都回滚)-->

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--配置事务的通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--配置事务的属性-->
        <tx:attributes>
            <!--<tx:method name="*"/>--><!--表示aop:pointcut标签的expression属性对应的所有方法都使用这个事务-->
            <tx:method name="find*"/><!--表示aop:pointcut标签的expression属性对应的方法名以find开头的所有方法都使用这个事务，相比于上面的 *，此 find* 的优先级更高！-->
            <tx:method name="transfer" propagation="REQUIRED" read-only="false"/>
        </tx:attributes>
    </tx:advice>
    <!--配置AOP-->
    <aop:config>
        <!--配置切入点表达式-->
        <aop:pointcut id="pointCutExpression1" expression="execution(* edu.hebeu.service.impl.*.*(..))"/>
        <!--建立切入点表达式和事务通知的对应关系-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCutExpression1"/>
    </aop:config>


</beans>