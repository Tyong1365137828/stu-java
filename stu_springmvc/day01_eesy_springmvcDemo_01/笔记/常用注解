@RequestMapping注解：用于建立请求URL和处理请求方法之间的对应关系
    属性：
        path：指定url(注意：在方法上出现：表示处理请求来的url;
            出现在类上，表示处理请求来的url的一级url,此时在方法上出现的就是处理请求来的url的二级url;);
        value：于path属性一样;
        method：用于指定请求的类型，使用方式：RequestMethod.请求类型
         RequestMethod类的源码：
            public enum RequestMethod {
             GET,
             HEAD,
             POST,
             PUT,
             PATCH,
             DELETE,
             OPTIONS,
             private RequestMethod() {
             }
            }
         params：用于指定限制请求参数的条件，它支持简单的表达式，要求请求参数的key和value必须和配置一模一样！！！
            如：
                params = {"accountName"} // 表示请求参数必须有accountName
                params = {"username=root} // 表示请求参数中的username必须是root
                params = {"money!10"} // 要求请求参数中的money不能是10
         headers：用于指定限制请求消息头的条件

@RequestParams注解：将请求中指定名称的参数给控制器中的形参赋值，使用在要赋值的形参上;
    属性：
        value：请求参数中的名称;
        required：请求参数中是否必须提供此参数。默认值：true，表示必须提供，不提供将会报错;

@RequestBody注解：用于获取请求体内容，直接使用得到是 key=value&key=value&...结构的数据，get请求方式不适用;
    属性：
        required：是否必须有请求体，默认值：true;当取值为true时，get请求方式会报错，当取值为false时，get请求方式得到的是null;

@PathVariable注解：用于绑定url中的占位符，如：请求url中 /delete/{id} ，这个id就是一个占位符;
    注意：url占位符是Spring3.0之后加入的，是SpringMVC支持rest风格url的一个重要标志;
    属性：
        value：用于指定url中占位符名称;
        name：与value属性一样;
        required：是否必须提供占位符;

@RequestHeader注解：用于获取指定请求的请求头信息;
    属性：
        value：用于指定获取哪个请求的请求头信息;
        name：与value属性一样;
        required：是否必须有请求头;

@CookieValue注解：用于获取Cookie;
    属性：
        value：用于指定获取哪个cookie;
        name：与value属性一样;
        required：是否必须有cookie;

@ModelAttribute注解：
    作用：
        SpringMVC4.3之后新加入的，可以用于修饰方法和参数;
        出现在方法上，表示当前方法会在控制器的方法执行之前先执行，它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法;
        出现在参数上，获取指定的数据给参数赋值;
    属性：
        value：用于获取数据的key，key可以是POJO的属性名称，也可以是Map结构的key;
    应用场景：
        当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据;
        如：我们在编写一个用户时，用户有一个创建信息字段，该字段的值是不允许被改动的，在提交表单数据是肯定没有此字段的内容，
        一旦更新会把该字段内容置为null，此时可以使用这个注解解决这个问题;

@SessionAttributes注解：用于多次执行控制器方法间的参数共享，只能出现在类上;
    属性：
        value：用于指定存入的属性名称;
        type：用于指定存入的数据类型;