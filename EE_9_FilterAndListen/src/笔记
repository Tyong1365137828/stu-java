一、过滤器：
	实现Filter接口的类，三个方法，init()初始化方法、destroy()销毁方法、doFilter()主方法，随服务器运行时加载
	注意：doFilter()方法：代表filter执行过滤的核心方法，如果某资源在已经被配置到这个filter进行过滤的话，
		那么每次访问这个资源都会执行doFilter()方法；dofilter就是放行
		

二、监听器：
	1、共有8个,分类：2+2+2+2或者6+2;其中最后的2是特殊的,使用时不用注册,不用设计为专门的监听器类,
		其他两个钝化	、激化(活)	、	绑定	、解绑
	2、作用：可以在不修改现有系统的基础上，增加web应用程序生命周期事件的跟综。
	3、	在servlet规范中定义了多种类型的监听器，它们用于监听的事件源分别为ServletContext(application)[生命周期监听器，即监听服务器的启动形式]、
	HttpSession(session)和ServletRequest(request)三个域对象。
	4、如：request含两个监听器：ServletRequestListener(监听(request事件)有request请求发生时用这个)、ServletRequestAttributeListener(监听(request属性)有创建request.set.../修改/移除等request时用这个)
			session含两个监听器：HttpSessionListener(监听(session事件)有session创建时用这个)、HttpSessionAttributeListener(监听(session属性)有session.set...时用这个)
			application含两个监听器：ServletContextListener(监听(application事件)时用这个)、ServletContextAttributeListener(监听(application属性)时用这个)
			其它2个：
				HttpSessionActivationListener（钝化、活化，序列号到硬盘―-----钝化）
				HttpSessionBindingListener（对象绑定）
				这两个比较特殊，不需要专门定义监听器类实现这两个接口，其应用场景是对某个session中的对象进行监听。
				如：session.setAttribute(“user”,user);
					session.setAttribute(“production”,production);
					session.setAttribute(“shoppingCat”, shoppingCat);
					在以上session中，只对user对象进行监听，那就把该监听器接口应用于User类上：Public class User implement HttpSessionBindingListener
		总结：监听对象自身创建和销毁的事件监听器(都有2个方法)3个，监听对象中的属性增加和删除(都有3个方法)的3个，监听绑定到HttpSession域中的某个对象的状态的事件监听
			器2个。前6个需要在web.xml中配置或注解。后2个不用。
补充：servlet的三兄弟：Filter 、 Listener 、 Servlet