这个工程用来学校23种设计模式的外观模式

问题引入：
	组建一个家庭影院：DVD 播放器、投影仪、自动屏幕、环绕立体声、爆米花机,要求完成使用家庭影院的功
	能，其过程为： 直接用遥控器：统筹各设备开关：
		开爆米花机		放下屏幕		打开投 影仪		打开音响
		开 DVD，选 dvd
		去拿爆米花调暗灯光播放
		观影结束后，关闭各种设备
		
	方案一：如果使用传统的解决思路，直接将以上的都抽象成若干的类，那么在客户端完成上面的需求进行使
	用时，代码会特别的繁琐且十分混乱！
	出现问题：
		1、在 ClientTest 的 main 方法中，创建各个子系统的对象，并直接去调用子系统(对象)相关方法，
		会造成调用过程混乱，没有清晰的过程；
		2、不利于在 ClientTest 中，去维护对子系统的操作
		3、解决思路：定义一个高层接口，给子系统中的一组接口提供一个一致的界面(比如在高层接口提供四
		个方法ready, play, pause, end )，用来访问子系统中的一群接口
		4、也就是说 就是通过定义一个一致的接口(界面类)，用以屏蔽内部子系统的细节，使得调用端只需跟
		这个接口发生调用，而无需关心这个子系统的内部细节 => 外观模式
		
外观模式的基本介绍：
	1、外观模式（Facade），也叫“过程模式\门面模式：外观模式为子系统中的一组接口提供一个一致的界面
	，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用；
	2、外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，
	而无需关心这个子系统的内部细节；

外观模式的细节和注意事项：
	1、模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性；
	2、外观模式对客户端与子系统的耦合关系 - 解耦，让子系统内部的模块更易维护和扩展；
	3、通过合理的使用外观模式，可以帮我们更好的划分访问的层次；
	4、当系统需要进行分层设计时，可以考虑使用 Facade 模式；
	5、在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发
	一个Facade 类，来提供遗留系统的比较清晰简单的接口，让新系统与 Facade 类交互，提高复用性；
	6、不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。要以让系统有层次，利
	于维护为目的。
