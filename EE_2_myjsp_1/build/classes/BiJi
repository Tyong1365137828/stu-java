一、jsp在tomcat下工作的实现：在work文件夹下会存放jsp文件，内含文件名_jsp.class和文件名_jsp两种文件



二、jsp执行流程：
1、首次次访问：服务器端将jsp文件翻译成"jsp文件名_jsp.java文件"的java文件(严格来讲是servlet文件)，
再将此java文件编译成"jsp文件名_jsp.class文件"的class文件，并将java文件和class文件放在tomcat
的\work\Catalina\虚拟主机名\上下文名\org\apache\jsp文件夹中

2、以后访问、直接访问class文件(但是如果服务端代码修改，将会在访问时重新翻译、编译)

注意：1)、work\Catalina文件夹中放的是虚拟主机名
	2)、第一次请求服务器端会有翻译、编译的过程，因此比较慢；以后访问，可以直接访问class，所有访问比较快，
	但是如果服务端代码修改，将会在访问时重新翻译、编译



二、http协议:
版本：1、HTTP1.0，所有的访问请求每次都要连接，效率低，单向的，只有用户请求资源	
2、HTTP1.1(当前流行)，相比于HTTP1.0效率高，单向的，只有用户请求资源	
3、HTTP2，即将实施，双向的，用户可以请求，服务器可以推送



三、HTTP请求：
1、请求方式的格式：
	请求行：统一资源标识符(URL)，协议版本号
	消息报头：包括修饰符，客户机信息
	可能的内容：POST请求的内容
	
2、请求方法：
	GET、POST、DELETE、HEAD、PUT、TRACE、CONNECT、OPTIONS
	重点掌握GET和POST
	注意：get与post请求的区别：
		1)、get:地址栏会显示请求信息(但是注意，地址栏能够容纳的信息有限，4-5KB，那么请求的数据如果过大，图片等，就会报错)；	
		post:地址栏不会显示
		2)、文件上传操作必须使用post
	
3、HTTP URL(统一资源定位符):
	格式：http://host[":"port][abs path]
	
	

四、HTTP响应：
1、响应信息格式
	状态行：包括信息的协议版本号，一个成功或错误的代码
	消息报头：包括服务器信息、字符编码、MIME类型
	响应正文
	
2、状态代码有三位数字组成，第一个数字定义响应类别，有五种取值：
	1xx：指示信息--表示信息已接收，继续处理
	2xx：成功--表示请求已被成功接收、理解、接受
	3xx：重定向--要完成请求必须进行更近一步的操作
	4xx：客户端错误--请求有语法错误或请求无法接受
	5xx：服务器端错误--服务器未能实现合法的请求
	
3、常见状态代码、状态描述、说明：
	200 OK //客户端请求成功
	302 REDIRECT //重定向
	403 Forbidden //服务器收到请求，但是拒绝提供服务
	404 Not Found //请求资源不存在，如输入了错误的URL
	500 Internal Server Error //服务器发生不可预期的错误
	
	
	
五、WebContent目录和其子目录WEB-INF目录
1、浏览器可以直接访问WebContent目录下的jsp文件，但是访问WebContent的子目录的jsp文件要加上路径
2、WEB-INF中的文件无法通过客户端(浏览器)直接访问，只能通过跳转来访问

注意：跳至有两种方式:
1、请求转发(可以通过此来访问WEB-INF中的jsp文件)	
2、重定向(不可以通过此来访问WEB-INF中的jsp文件)



六、创建jsp文件第一行报错处理解决
方法一、将tomcat/lib中的"servlet-api.jar"拷贝到此项目的src中，再右击"servlet-api.jar"，点击Build Path的Add to Build Path即可

方法二、参考"E:\学习\javaEE\第一次课\课前\jsp文件创建的报错"

注意：jsp<---->servlet，两者可以互转，jsp文件首行出错的原因是jsp能转servlet，但是servlet不能转jsp




七、编码设置，以utf-8为例(注：tomcat7及其以前默认"iso-8859-1"，8及其以后默认"utf-8")

统一请求编码：request
	get请求，解决乱码：1)、使用"new String(要转码的变量名.getBytes("旧编码"),"新编码")"一个一个的改
						2)、修改server.xml文件，一次性的修改tomcat默认get提交方式的编码，在"<Connector>"标签中添加URIEncoeding="需要修改成什么样的编码"
						如URIEncoeding="UTF-8"

	post请求，解决乱码：使用"request.setCharacterEncoding("需要改成的新编码")"

方式一、jsp文件的统一字符集编码：每次创建jsp文件后都要修改
1)、设置jsp文件的编码：修改jsp文件的pageEncoding属性为"utf-8"
2)、设置浏览器读取jsp文件的编码：修改jsp文件的两个content属性为"utf-8"

注意、上述两个(jsp文件中有三处)的编码一般设置为一样的，编码名字的大小写不区分

方式二、文本编码(将从此时开始整个eclipse中的文件统一设置)：一次修改，以后创建jsp文件后不用修改
	点击Window中的Preferences，搜索jsp后选择"JSP Files"，把"Encoding"属性改为"utf-8"

方式三、设置某一个项目的编码：
	右击需要修改的项目，选择Properties中的Resource，把other改为"utf-8"
	
方式三、设置某个文件的编码：
	右击需要修改的文件，选择Properties中的Resource，把other改为"utf-8"
	
方式四、设置工作区间的编码：
	点击Window中的Preferences，选中General中的workspace把other改成"utf-8"


八、jsp文件包含的东西：
1、脚本Scriptlet(java代码)
	1)、<%
		用于定义局部变量、常规java代码，调用方法等
		%>
	
	2)、<%!
		用于定义全局变量，方法等
		%>
		
	3)、<%=用于输出的表达式%>(注意写完输出语句后没有";")

注意：1>、java代码里的换行无法在jsp等前台文件中生效，要想在前台文件换行就要使用"<br/>"标签
	或者在java代码中使用代码"out.print("<br/>")"输出"<br/>"标签
	2>、可以看到"out.print()"里可以直接写html代码
	
2、HTML

3、指令:,jsp中的三种指令:1、<%@ page...%>	定义网页依赖属性，比如脚本语言、error页面、缓存需求等等
								2、<%@ include...%>	包含其他文件
								3、<%@ taglib...%>	引入标签库的定义

 1)、以page指令为例,在网页的最开头:(如"<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>")
    page指令的属性:language：jsp页面使用的脚本语言	import：导入类或包	pageEncoding：jsp文件自身编码(用于jsp-->java)	contentType：浏览器解析jsp的编码
    
4、注释：
 		html注释		<!-- -->			会被浏览器客户端由查看源码看到
 		java注释		//		/*...*/		不会被浏览器客户端由查看源码看到
 		jsp注释		<%-- --%>			不会被浏览器客户端由查看源码看到



九、jsp的九大内置对象(自带的，不需要new也能使用的对象)
	1、out：输出对象，向客户端输出内容
		常见方法：out.print("向客户端输出的内容")
		
	2、request：请求对象，存储"客户端(浏览器)向服务端发送的请求信息"
		常见方法：	1、String/int/... "定义变量名" = request.getParameter(String name<"input的name属性">)：根据请求的字段名key(input的name属性)，返回字段值value
					2、String[] "定义数组名" = request.getParameterValues(String name)：根据请求的字段名key，返回多个字段值value(如checkbox)
					3、request.setCharacterEncoding("需要设置的编码格式")：设置请求编码,未设置按照tomcat
											注：tomcat7及其以前默认"iso-8859-1"，8及其以后默认"utf-8"
					4、request.getRequestDispatcher("B.jsp").forward(request, response);：请求转发的方式，跳转至B页面
					5、ServletContext getServerContext()：由request对象获取项目的ServletContext对象
					6、request.setAttribute("起个名", 赋值);：可以给request中赋值(也可以赋值变量)
		request作用域:只在同一次请求有效(如转发等)，其他请求无效(如重定向等)
					
	
	3、response：响应对象，服务端到客户端
		常见方法：	1、void addCookie(Cookie cookie)：服务端向客户端增加cookie对象
					2、response.sendRedirect("需要重定向的路径") throws IOException;：重定向(页面跳转的一种方式)
					3、void setContetType(String type)：设置服务端响应的编码(设置服务端的contentType类型)
	
	4、session:会话对象(存在于服务端、在同一个客户请求时共享)：会话(如1、开始浏览--关闭浏览器；2、浏览--付款--退出；等均称为一次会话)
	Session的机制：
		1)、服务端会在客户端第一次请求时创建一个Session(用于保存该客户机的信息)，Session中会自带一个SessionId(值是唯一的,相对于浏览器或服务器是否重启,区分其他的Session以达到区分客户机)，
	之后服务端会把SessionId的值(Cookie的Value)赋给JSESSIONID(Cookie的Name)并把它存在Cookie中(即新建一个Cookie，它的Name=JSESSIONID,Value=SessionId的值)，
	之后在响应时随着页面的跳转(Cookie也会跟着走)把它传给客户端；此时，该客户机就有了一个Cookie(JSESSIONID)就与服务端Session(SessionId)一一对应起来；
		2)、客户机第二次或第n次请求服务端时，服务端会先用客户机的Cookie中的JSESSIONID去和服务端的Session中的SessionId去匹配，根据匹配成功与否进而做出相应的
	反应(如不是第一次访问，就不用登录了等操作)；
		3)、同一浏览器下，同一次会话Session资源共享
	常见方法：
		1)、String getId();//获取sessionId
		2)、boolean isNew();//判断是否是新用户(第一次访问)
		3)、void invalidate();//使session失效
		4)、setAttribute();		getAttribute();
		5)、void setMaxInactiveInterval(秒);//设置最大有效非活动时间
		6)、void getMaxInactiveInterval(秒);//获取当前最大有效非活动时间是多少
	
		补充：Cookie(存在于客户端，不是内置对象,所以使用时要new产生对象):由服务端产生，再发送给客户端保存;类似于本地缓存的作用
			作用:提高客户端访服务端的效率，但安全性较差
			存储方式：name=value
			Cookie存在于javax.servlet.http.Cookie
			Cookie的基本方法：
				public Cookie(String name,String value)//构造方法
				String getName()//获取name
				String getValue()//获取value
				get setMaxAge(int expiry)//设置最大有效期,单位是秒
			如何把Cookie从服务端发送给客户端的步骤：
				1、response.addCookie(Cookie cookie)//准备Cookie
				2、页面跳转(转发、重定向均可)//会把服务端的Cookie带给跳转后的客户端
				3、request.getCookies()//客户端获取Cookie,注意1、获取Cookie只能获取全部Cookie进行遍历取得所要的Cookie,不能直接获取某个Cookie；2、Cookie不能存取汉字,只能保存英文或汉字
			注意：1、cookie获取时在浏览器用F12会发现出自己定义的Cookie对象外，还有一个自带的name为JSESSIONID(在客户端里)的Cookie对象，与服务端的SessionId一一对应，用于区分客户
				2、服务端在第一次响应时会自动创建并向客户端发送一个cookie(Name为JSESSIONID，Value为SessionId的cookie)，即服务端即使没有new出cookie，客户端也能取出cookie(Name为JSESSIONID的cookie)
			作用：用于实现记住账户免登录等操作
		Cookie与Session的区别：
							Session					Cookie
		保存位置				服务端					客户端
		安全性				较安全					较不安全
		保存的内容			Object					String
	
	5、application：全局对象
	常见方法：
	String getContextPath()//虚拟路径
	String getRealPath()//绝对路径(虚拟路径相对的绝对路径)
	setAttribute()	getAttribute()
	
	6、pageContext//jsp页面容器
	
	7、config//配置对象，服务器配置信息
	8、page//当前jsp页面对象，相当于java中的this;如"a.jsp",表示a页面;"b.jsp",表示b页面;
	9、exception	//异常对象

	注意：四种范围对象(由小到大)
	pageContext(page对象)：jsp页面容器			当前页面有效,跳转后无效(包括转发、重定向等)
	request：请求对象							同一次请求有效(如转发有效、重定向无效)
	session:会话对象								同一次会话有效(转发、重定向均有效)
	application：全局对象						全局有效(整个项目运行期间都有效,切换浏览器依然有效,关闭或重启服务器后无效)
	以上四个对象的共有方法：
		1)、Object getAttribute(String name)：根据属性名获取属性值
		2)、void setAttribute(String name,Object obj)：设置属性值(新增、修改)
				例如:setAttribute("a","b")//如果a对象之前不存在,则新建一个a对象并赋为b;如果a对象之前存在,则将a的值改为b的值;
		3)、void removeAttribute(String name)//根据属性名删除对象
		
	
十、关于是否需要重启服务器：
一般而言，修改web.xml、配置文件、Java代码需要重启服务器才会生效，但是修改html、css、js、jsp不用重启服务器即可生效