	一个进程是一个应用程序；线程是一个进程中的执行场景/执行单元；一个进程可以启动多个线程；

	例如：对于Java程序来说，如当在DOS命令窗口中输入：java HelloWord，并回车之后，会先启动JVM，而JVM就是一个进程；
JVM再启动一个主线程调用main方法，同时再启动一个垃圾回收线程负责看护、回收垃圾，因此在Java程序中至少有两个线程；
一个是执行main方法的主线程，一个是垃圾回收线程；

	进程和线程的关系：
			进程A和进程B的内存独立不共享；
			在Java中，线程A和线程B堆内存和方法区内存共享；但是栈内存独立，一个线程一个栈；(即启动10个线程，会有10个栈空间，
		每个栈于每个栈之间互不干扰，各自执行各自的，这就是多线程并发)；
		
	Java中之所以有多线程机制，目的就是为了提高程序的执行效率；
	
	结论：使用了多线程机制后，main方法结束只是主线程结束，主栈空了，其他的栈(线程)可能还在压栈弹栈等操作；
	
什么是真正的多线程并发？
	t1执行t1的；t2执行t2的；t1与t2之间互不影响，互不干涉；这叫做真正的多线程并发。
	
对于单核的CPU计算机来说，真的可以做到真正的多线程并发吗？
	对于多核CPU的计算机来说，真正的多线程并发是没有问题的(如4和CPU计算机表示同一个时间点上，可以真正的有4个进程并发执行)；
对于单核CPU的计算机来说，不能够做的真正的多线程并发，但是可以给人一种多线程并发的感觉！对于单核CPU计算机来说，在某一个时间
点上只能处理一件事情，但是由于CPU处理速度极快，多个线程之间频繁切换执行，给人们的感觉就是多个事情同时在做！！！
	如：线程A：玩游戏；线程B：播放音乐；线程A与线程B频繁切换操作执行，人会感觉游戏一直在运行，音乐一直在播放，给我们的感觉就是并发的！！！
	
Java中有三种方式创建多线程：
	第一种：编写一个类，让这个类继承java.lang.Thread类，并重写run()方法；{此时这个类就是线程类}
		然后通过这个线程类创建对象，通过线程对象调用start()方法开辟新空间，启动线程；
	第二种：编写一个类，实现java.lang.Runnable接口。实现run()方法；{此时这个类不是线程类，而是可运行类}
		通过Thread类的构造方法，将上面的可运行类的对象传入，创建线程对象；
		通过线程对象调用start()方法开辟新空间，启动线程；
	建议使用第二种(实现接口)方式，因为一个类实现了接口，它还能去继承其他类，更灵活
	第三种：采用匿名内部类方式