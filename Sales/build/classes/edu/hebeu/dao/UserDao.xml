<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.hebeu.dao.UserDao">
	
	<!-- 查找用户的购买商品 -->
	<resultMap type="userCustom" id="OrderdetailByUserName">
		<id column="account" property="account"/>	<!-- 首先是主表user -->
		<result column="name" property="name"/>
		<result column="address" property="address"/>
		<result column="tel" property="tel"/>
		
		<!-- 再用辅表order，关系是一对多 -->
		<collection property="order_list" ofType="order" >
			<result column="num" property="num" />
			<result column="createtime" property="createtime" />
			
			<!-- 再用辅表orderdetail，与其关系是一对多 -->
			<collection property="orderdetail_list" ofType="orderdetail" >
				<id column="items_code" property="items_code" />
				<result column="items_num" property="items_num"  />
				
				<!-- 辅表items，与其关系是一个一 的-->
				<association property="items" javaType="items">
					<result column="item_name" property="name" />
					<result column="src" property="src" />
				</association>
			
			</collection>
		</collection>
	</resultMap>
	
	
	<!-- 定义精确sql片段，减少重复sql的语句，但是注意<where>标签不能放在此！！ -->
	<sql id="find_single_sql">
	
		<if test="userCustom.name != null and userCustom.name != '' "><!-- 如果user.name不是空就执行此，即把此部分拼装到sql -->
			AND `user`.name = #{userCustom.name} 	<!--因为${}会存在SQL注录问题,不推荐使用这种SQL语句,所以使用concat()拼接函数，在其内部就能使用#{}了  -->
			
		</if>
		
		<if test="userCustom.age != null and userCustom.age !='' "><!-- 如果年龄不为空 -->
			AND TIMESTAMPDIFF(	YEAR,
				`user`.birthday,
				CURDATE()
			) = #{userCustom.age}
		</if>
		
		<if test="userCustom.account !=null and userCustom.account !='' "><!-- 如果账号不为空 -->
			AND `user`.account = #{userCustom.account}
		</if>
		
		<if test="userCustom.password !=null and userCustom.password !='' "><!-- 如果密码不为空 -->
			AND `user`.password = #{userCustom.password}
		</if>
		
		<if test="userCustom.sex !=null and userCustom.sex !='' "><!-- 如果性别不为空 -->
			AND `user`.sex = #{userCustom.sex}
		</if>
		
		<if test="userCustom.address !=null and userCustom.address !='' "><!-- 如果地址不为空 -->
			AND `user`.address = #{userCustom.address}
		</if>
		
		<if test="userCustom.tel !=null and userCustom.tel !='' "><!-- 如果电话不为空 -->
			AND `user`.tel = #{userCustom.tel}
		</if>
	</sql>
	


	<!-- 定义模糊sql片段，减少重复sql的语句，但是注意<where>标签不能放在此！！ -->
	<sql id="find_dim_sql">
	
		<if test="userCustom.name != null and userCustom.name != '' "><!-- 如果user.name不是空就执行此，即把此部分拼装到sql -->
			AND `user`.name LIKE concat('%',#{userCustom.name},'%') 	<!--因为${}会存在SQL注录问题,不推荐使用这种SQL语句,所以使用concat()拼接函数，在其内部就能使用#{}了  -->
			
		</if>
		
		<if test="userCustom.age != null and userCustom.age !='' "><!-- 如果名字不为空 -->
			AND TIMESTAMPDIFF(	YEAR,
				`user`.birthday,
				CURDATE()
			) >= #{userCustom.age}
		</if>
		
		<if test="userCustom.account !=null and userCustom.account !='' "><!-- 如果账号不为空 -->
			AND `user`.account = #{userCustom.account}
		</if>
		
		<if test="userCustom.password !=null and userCustom.password !='' "><!-- 如果密码不为空 -->
			AND `user`.password = #{userCustom.password}
		</if>
		
		<if test="userCustom.sex !=null and userCustom.sex !='' "><!-- 如果性别不为空 -->
			AND `user`.sex = #{userCustom.sex}
		</if>
		
		<if test="userCustom.address !=null and userCustom.address !='' "><!-- 如果地址不为空 -->
			AND `user`.address = #{userCustom.address}
		</if>
		
		<if test="userCustom.tel !=null and userCustom.tel !='' "><!-- 如果电话不为空 -->
			AND `user`.tel = #{userCustom.tel}
		</if>
	</sql>
	

	<select id="findUserDim" parameterType="userQueryVo" resultType="userCustom" ><!-- 模糊查询用户信息 -->
		SELECT
			*,
			TIMESTAMPDIFF(YEAR ,`user`.birthday, CURDATE()) AS 'age'<!-- 从表中的birthday和当前时间进行运算得出年龄，并创造一个新列age，然后把计算结果放入新列age中 -->
		FROM
			`user`
		<where><!-- 使用where把这些if都包含起来替代原始的where 1=1，因为使用where 1=1时，如果第一个参数输入不为空，但是第二个参数输入为空，sql语句就会出现错误！！！变成where 1=1 and .....，但是where会把这些情况(去除没必要的AND)自动进行处理 -->
			<include refid="find_dim_sql"></include><!--  动态sql-->
		</where>
	</select>
	
	
	<select id="findUserSingle" parameterType="userQueryVo" resultType="userCustom">	<!-- 精确查询用户信息 -->
		SELECT
			*,
			TIMESTAMPDIFF(YEAR ,`user`.birthday, CURDATE()) AS 'age'<!-- 从表中的birthday和当前时间进行运算得出年龄，并创造一个新列age，然后把计算结果放入新列age中 -->
		FROM
			`user`
		<where><!-- 使用where把这些if都包含起来替代原始的where 1=1，因为使用where 1=1时，如果第一个参数输入不为空，但是第二个参数输入为空，sql语句就会出现错误！！！变成where 1=1 and .....，但是where会把这些情况(去除没必要的AND)自动进行处理 -->
			<include refid="find_single_sql"></include><!--  动态sql-->
		</where>
	</select>
	

	<select id="findUserByCount" parameterType="int" resultType="userCustom">	<!-- 查询第n到m条的用户记录 -->
		SELECT 
			*,
			TIMESTAMPDIFF(YEAR ,`user`.birthday, CURDATE()) AS 'age'
		FROM 
			`user` 
		ORDER BY 
			account 
		LIMIT 
			#{start} ,#{end}
	</select>
	
	<select id="findUserByCountMul" resultType="userCustom">
		SELECT 
			*,
			TIMESTAMPDIFF(YEAR ,`user`.birthday, CURDATE()) AS 'age'
		FROM 
			`user` 
		 WHERE `user`.`name` LIKE concat('%',#{userCustom.name},'%') 
		ORDER BY 
			account 
		LIMIT 
			#{start} ,#{end}
	
	</select>

	<insert id="save" parameterType="user" ><!-- 插入一行记录 -->
 		insert into user(account,password,name,birthday,
			sex,address,tel) 
		value(#{account},#{password},#{name},#{birthday},
			#{sex},#{address},#{tel})
	</insert>


	<update id="update" parameterType="user">	<!-- 修改一行记录 -->
		update user 
			set password=#{password},name=#{name},
			birthday=#{birthday},sex=#{sex},address=#{address},tel=#{tel} 
		where account=#{account}
	</update>
	
	<delete id="delete" parameterType="user">
		delete from user where account=#{account}
	</delete>
	
	
	<select id="findOrderToItemsByUserAccount" parameterType="userQueryVo" resultMap="OrderdetailByUserName"><!-- 通过用户名模糊查询订单明细和商品信息 -->
		SELECT
			`order`.num,
			`order`.createtime,
			`user`.account,
			`user`.`name`,
			`user`.address,
			`user`.tel,
			orderdetail.items_code,
			orderdetail.items_num,
			items.`name` item_name,
			items.src
		FROM
			`order`,
			`user`,
			orderdetail,
			items
		WHERE
			orderdetail.order_num = `order`.num
			AND `order`.user_account = `user`.account
			AND items.`code` = orderdetail.items_code
			AND `user`.`account` = #{userCustom.account}
		ORDER BY
			`user`.account
	</select>
	
	<select id="findOrderToItemsByUserAccountForCount" resultMap="OrderdetailByUserName">
		SELECT
			`order`.num,
			`order`.createtime,
			`user`.account,
			`user`.`name`,
			`user`.address,
			`user`.tel,
			orderdetail.items_code,
			orderdetail.items_num,
			items.`name` item_name,
			items.src
		FROM
			`order`,
			`user`,
			orderdetail,
			items
		WHERE
			orderdetail.order_num = `order`.num
			AND `order`.user_account = `user`.account
			AND items.`code` = orderdetail.items_code
			AND `user`.`account` = #{userQueryVo.userCustom.account}
		ORDER BY
			`user`.account
		LIMIT 
			${start},${end}
	</select>
		

</mapper>
