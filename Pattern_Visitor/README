这个项目用来学习23种设计模式的访问者模式

问题引出：
	完成测评系统需求：将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手
	不同的评价(评价 有不同的种类，比如 成功、失败、弃权 等)
	
	方案一：设计一个Person类，在分别定义一个Man类和Woman类，让这两个类去继承Person，并在这两个类
	中添加方法(包括成功的方法，失败的方法、弃权的方法)
	问题分析：
		1、如果系统比较小，还是可以的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反
		了 ocp 原则， 不利于维护
		2、扩展性不好，比如 增加了 新的人员类型，或者管理方法，都不好做
		3、引出我们会使用新的设计模式 – 访问者模式
		
访问者模式的基本介绍：
	1、访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数
	据结构的前提下定义作用于这些元素的新的操作；
	2、主要将数据结构与数据操作分离，解决 数据结构和操作耦合性问题；
	3、访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口；
	4、访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，
	同时需要避免让这些操作"污染"这些对象的类，可以选用访问者模式解决；

	双分派介绍：
		所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。双分派意味着得到执行的操作取决于
		请求的种类和两个接收者的类型；以上述实例为例，假设我们要添加一个 Wait 的状态类，考察 Man 类
		和 Woman 类的反应，由于使用了双分派，只需增加一个 Action 子类即可在客户端调用即可，不需要改
		动任何其他类的代码。

访问者模式的细节和注意事项：
	优点
		1、访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高
		2、访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的
		系统；
	缺点
		1、具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议
		的, 这样造成了具体元素变更比较困难；
		2、违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素
		3、因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较
		合适的.
	
