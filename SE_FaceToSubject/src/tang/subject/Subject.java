package tang.subject;
//类的使用方法:两种   1.构造器--构造方法     2.类直接调用
//类的设计：三种      	一.封装 1.private  2.构造方法   3.set方法 get方法（set赋值 get取值）
    				//二.继承 JAVA为单继承（即后面只有一个类） 接口--用于实现多重继承（注：构造的方法不能继承）
					//注：方法覆盖：方法头一摸一样；  重载：方法头发生变化（即方法参数个数，类型）
					//三.多态 
public class Subject {

	public static void main(String[] args) {
		/*对应法一
		Classes c2=new Classes(3.0); 
	 	c2.zhouchang(); 
	 	c2.area();
		*/
		/*对应法二
		Classes c1=new Classes();
		c1.setR(3.0);
		c1.zhouchang();
		c1.area();
		*/
	}

}



//java接口----抽象方法+常量的集合，集合中是否可有一般方法（j7和其之前不可；j8和其之后可有）
/*
 * 接口与抽象类非常接近，但不等于，他们的异同点有： 1.连接方式不同，抽象类勇extends；接口用implments；
 * 2.抽象类中有一般方法，接口中没有（不能有）
 */
//造类的几种方法：新类的定义（独立的）；继承（只能跟一个类）；实现接口（1到n个类，用“，”隔开）；继承+接口；
//类的生成中，可以采用继承来实现，但缺点是只能是单继承；  多重继承-------接口来实现




//java的异常处理机制
//1.什么是是异常:程序运行过程中出现的小问题，程序设计过程中要进行处理，这是程序员做的工作
//让程序正常的走下去，平稳着陆，友好的停止下来。Exception
//大问题:error违法
/*
 * 2.如何去实现处理-----三种方法 ：
 * （1）try {可能出现异常的部分,即捕获异常}catch(错误类型Exception e){出现异常时的输出--(面向用户的)+[e.printStrackTrace()]面向程序员的，此部分可有可无}catch()......finally{无论try扩起的部分异常与否，都会执行此语句} [注:catch有1到n个且catch语句再出现异常时执行，并且只能执行一个catch语句;finally可有可无]，捕获和处理异常；  ----实时处理 
 * （2）throw强制抛出异常----用在方法中（方法体中），属于方法的一条语句。 ----调用者处理
 * （3）throws 抛出异常---用在方法中（方法头中），方法声明中。后可接多个异常  ----强制停止
 */
//3.异常类(只能用java类库中的内容)
//4.自定义异常类




//自动布局管理(常用4种，最少会3种)
//采用的1、边界布局BorderLayout
//(1)这是框架的基本布局		(2)策略:把界面分成五块，五个区域:东西南北中			(3)结合panel嵌套布局，解决数量不足问题
//

