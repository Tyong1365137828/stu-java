这个工程用来学习23种设计模式的中介者模式

引出问题：
	1、智能家庭包括各种设备，闹钟、咖啡机、电视机、窗帘 等
	2、主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流程为：闹铃响起->咖啡
	机开始做咖啡->窗帘自动落下->电视机开始播放
	
	方案一：传统的解决，按照执行的流程决定各个类之间的依赖关系
	问题分析：
		1、当各电器对象有多种状态改变时，相互之间的调用关系会比较复杂
		2、各个电器对象彼此联系，你中有我，我中有你，不利于松耦合.
		3、各个电器对象之间所传递的消息(参数)，容易混乱
		4、当系统增加一个新的电器对象时，或者执行流程改变时，代码的可维护性、扩展性都不理想	考虑
		中介者模式
		
中介者模式的基本介绍：
	1、中介者模式（Mediator Pattern），用一个中介对象来封装一系列的对象交互。中介者使各个对象不需
	要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互；
	2、中介者模式属于行为型模式，使代码易于维护
	3、比如 MVC 模式，C（Controller 控制器）是 M（Model 模型）和 V（View 视图）的中介者，在前后端
	交互时起到了中间人的作用；
	须知：MVC就是中介者模式；
	
中介者模式的细节和注意事项：
	1、多个类相互耦合，会形成网状结构, 使用中介者模式将网状结构分离为星型结构，进行解耦
	2、减少类间依赖，降低了耦合，符合迪米特原则
	3、中介者承担了较多的责任，一旦中介者出现了问题，整个系统就会受到影响
	4、如果设计不当，中介者对象本身变得过于复杂，这点在实际使用时，要特别注意
	