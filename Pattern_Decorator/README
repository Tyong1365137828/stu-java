这个工程用来学习23种设计模式的装饰者模式(Decorator Pattern)

问题引入：星巴克咖啡订单项目（咖啡馆）：
	1、咖啡种类/单品咖啡：Espresso(意大利浓咖啡)、ShortBlack、LongBlack(美式咖啡)、Decaf(无因咖啡)
	2、调料：Milk、Soy(豆浆)、Chocolate
	3、要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便
	4、使用 OO 的来计算不同种类咖啡的费用:  客户可以点单品咖啡，也可以单品咖啡+调料组合。
	
	方案一：
		1、Drink 是一个抽象类，表示饮料
		2、des 就是对咖啡的描述, 比如咖啡的名字
		3、cost() 方法就是计算费用，Drink 类中做成一个抽象方法.
		4、将每种单品的咖啡、每种单品咖啡与各个调料进行排列组合 都定义一个类；
		问题：这样设计，会有很多类，当我们增加一个单品咖啡，或者一个新的调料，类的数量就会倍增，就会出现类爆炸；
		
	方案二：
		1、前面分析到方案 1 因为咖啡单品+调料组合会造成类的倍增，因此可以做改进，将调料内置到 Drink 类，这样就不
		会造成类数量过多。从而提高项目的维护性；
		2、可以控制类的数量，不至于造成很多的类
		3、在增加或者删除调料种类时，代码的维护量很大
		4、考虑到用户可以添加多份 调料时，可以将 hasMilk 返回一个对应 int
		问题：虽然该方式解决了类爆炸的问题，但是，在增删改 一个单品咖啡 或者 某个调料时，代码的修改量会非常大，
		代码的维护量很大
		
	方案三：装饰者模式
	
装饰者模式定义：
		1、装饰者模式：动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了开
		闭原则(ocp)；
		2、这里提到的动态的将新功能附加到对象和 ocp 原则，在后面的应用实例上会以代码的形式体现，请同学们注意
		体会。
		
		